/*
Copyright 2024 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/k-orc/openstack-resource-controller/api/v1alpha1"
)

// ImageSpecApplyConfiguration represents an declarative configuration of the ImageSpec type for use
// with apply.
type ImageSpecApplyConfiguration struct {
	ImageName           *string                                      `json:"imageName,omitempty"`
	Protected           *bool                                        `json:"protected,omitempty"`
	Tags                []v1alpha1.ImageTag                          `json:"tags,omitempty"`
	Visibility          *v1alpha1.ImageVisibility                    `json:"visibility,omitempty"`
	Properties          *ImagePropertiesApplyConfiguration           `json:"properties,omitempty"`
	Content             *ImageContentApplyConfiguration              `json:"content,omitempty"`
	ControllerOptions   *ControllerOptionsApplyConfiguration         `json:"controllerOptions,omitempty"`
	CloudCredentialsRef *CloudCredentialsReferenceApplyConfiguration `json:"cloudCredentialsRef,omitempty"`
}

// ImageSpecApplyConfiguration constructs an declarative configuration of the ImageSpec type for use with
// apply.
func ImageSpec() *ImageSpecApplyConfiguration {
	return &ImageSpecApplyConfiguration{}
}

// WithImageName sets the ImageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageName field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithImageName(value string) *ImageSpecApplyConfiguration {
	b.ImageName = &value
	return b
}

// WithProtected sets the Protected field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protected field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithProtected(value bool) *ImageSpecApplyConfiguration {
	b.Protected = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *ImageSpecApplyConfiguration) WithTags(values ...v1alpha1.ImageTag) *ImageSpecApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithVisibility sets the Visibility field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Visibility field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithVisibility(value v1alpha1.ImageVisibility) *ImageSpecApplyConfiguration {
	b.Visibility = &value
	return b
}

// WithProperties sets the Properties field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Properties field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithProperties(value *ImagePropertiesApplyConfiguration) *ImageSpecApplyConfiguration {
	b.Properties = value
	return b
}

// WithContent sets the Content field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Content field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithContent(value *ImageContentApplyConfiguration) *ImageSpecApplyConfiguration {
	b.Content = value
	return b
}

// WithControllerOptions sets the ControllerOptions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerOptions field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithControllerOptions(value *ControllerOptionsApplyConfiguration) *ImageSpecApplyConfiguration {
	b.ControllerOptions = value
	return b
}

// WithCloudCredentialsRef sets the CloudCredentialsRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudCredentialsRef field is set to the value of the last call.
func (b *ImageSpecApplyConfiguration) WithCloudCredentialsRef(value *CloudCredentialsReferenceApplyConfiguration) *ImageSpecApplyConfiguration {
	b.CloudCredentialsRef = value
	return b
}
