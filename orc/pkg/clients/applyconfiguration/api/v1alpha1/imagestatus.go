/*
Copyright 2024 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ImageStatusApplyConfiguration represents an declarative configuration of the ImageStatus type for use
// with apply.
type ImageStatusApplyConfiguration struct {
	Conditions       []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
	DownloadAttempts *int                             `json:"downloadAttempts,omitempty"`
	ImageID          *string                          `json:"imageID,omitempty"`
	Status           *string                          `json:"status,omitempty"`
	Hash             *ImageHashApplyConfiguration     `json:"hash,omitempty"`
	SizeB            *int64                           `json:"sizeB,omitempty"`
	VirtualSizeB     *int64                           `json:"virtualSizeB,omitempty"`
}

// ImageStatusApplyConfiguration constructs an declarative configuration of the ImageStatus type for use with
// apply.
func ImageStatus() *ImageStatusApplyConfiguration {
	return &ImageStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ImageStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *ImageStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithDownloadAttempts sets the DownloadAttempts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DownloadAttempts field is set to the value of the last call.
func (b *ImageStatusApplyConfiguration) WithDownloadAttempts(value int) *ImageStatusApplyConfiguration {
	b.DownloadAttempts = &value
	return b
}

// WithImageID sets the ImageID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageID field is set to the value of the last call.
func (b *ImageStatusApplyConfiguration) WithImageID(value string) *ImageStatusApplyConfiguration {
	b.ImageID = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ImageStatusApplyConfiguration) WithStatus(value string) *ImageStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithHash sets the Hash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hash field is set to the value of the last call.
func (b *ImageStatusApplyConfiguration) WithHash(value *ImageHashApplyConfiguration) *ImageStatusApplyConfiguration {
	b.Hash = value
	return b
}

// WithSizeB sets the SizeB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SizeB field is set to the value of the last call.
func (b *ImageStatusApplyConfiguration) WithSizeB(value int64) *ImageStatusApplyConfiguration {
	b.SizeB = &value
	return b
}

// WithVirtualSizeB sets the VirtualSizeB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VirtualSizeB field is set to the value of the last call.
func (b *ImageStatusApplyConfiguration) WithVirtualSizeB(value int64) *ImageStatusApplyConfiguration {
	b.VirtualSizeB = &value
	return b
}
